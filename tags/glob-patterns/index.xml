<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Glob Patterns on Arthurs Blogs</title><link>https://blogs.homeport-hub.nl/tags/glob-patterns/</link><description>Recent content in Glob Patterns on Arthurs Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Jul 2025 17:00:00 +0200</lastBuildDate><atom:link href="https://blogs.homeport-hub.nl/tags/glob-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Glob Patterns in GitHub Copilot Custom Instructions</title><link>https://blogs.homeport-hub.nl/post/copilot-glob-patterns/copilot_glob_patterns/</link><pubDate>Mon, 14 Jul 2025 17:00:00 +0200</pubDate><guid>https://blogs.homeport-hub.nl/post/copilot-glob-patterns/copilot_glob_patterns/</guid><description>&lt;h1 id="deep-dive-glob-patterns-in-github-copilot-custom-instructions">Deep Dive: Glob Patterns in GitHub Copilot Custom Instructions&lt;/h1>
&lt;p>GitHub Copilot’s custom instructions let you provide project-specific guidance to the AI. By creating a repository file (typically &lt;code>.github/copilot-instructions.md&lt;/code> or &lt;code>*.instructions.md&lt;/code> in VS Code) you can tailor Copilot’s behavior to your team’s conventions and tools [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>]. Organizing these instructions with &lt;code>applyTo&lt;/code> filters improves maintainability: each instruction file can automatically apply only to matching files or folders, so you don’t have to duplicate or manually attach guidance. For example, setting &lt;code>applyTo: &amp;quot;**&amp;quot;&lt;/code> applies instructions to &lt;em>all&lt;/em> files, whereas more specific patterns target only relevant code [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>]. This keeps your instructions clean and focused on the files where they matter [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="understanding-glob-patterns">Understanding Glob Patterns&lt;/h2>
&lt;p>Glob patterns are a lightweight syntax for matching file paths. They use wildcards like &lt;code>*&lt;/code> and &lt;code>**&lt;/code> to match characters or directory levels.&lt;/p>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> matches any sequence of characters &lt;em>within&lt;/em> a single path segment. For example, &lt;code>*.ts&lt;/code> matches all TypeScript files in the current directory [&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>vscode-advanced-search&lt;/a>].&lt;/li>
&lt;li>&lt;code>**&lt;/code> is a recursive wildcard that matches any number of directories (including zero). For example, &lt;code>**/*.md&lt;/code> matches all Markdown files in the current directory and &lt;strong>any&lt;/strong> subdirectory [&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>vscode-advanced-search&lt;/a>].&lt;/li>
&lt;li>&lt;code>?&lt;/code> matches exactly one character (e.g. &lt;code>file?.js&lt;/code> would match &lt;code>file1.js&lt;/code> or &lt;code>fileA.js&lt;/code> but not &lt;code>file10.js&lt;/code>). Character classes (e.g. &lt;code>[abc]&lt;/code>) match any one character in the brackets, and you can use ranges (&lt;code>[A-Z]&lt;/code>, &lt;code>[0-9]&lt;/code>) or negation (&lt;code>[!abc]&lt;/code>).&lt;/li>
&lt;/ul>
&lt;p>You can combine patterns (e.g., using &lt;code>{...}&lt;/code> or comma-separated lists) to match multiple extensions. For example, &lt;code>**/*.{js,ts,tsx}&lt;/code> can target several file types at once. Copilot’s &lt;code>applyTo&lt;/code> field supports comma-separated patterns, such as &lt;code>&amp;quot;**/*.ts,**/*.tsx&amp;quot;&lt;/code>, which matches both &lt;code>.ts&lt;/code> and &lt;code>.tsx&lt;/code> files [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="using-glob-patterns-in-copilot-custom-instructions">Using Glob Patterns in Copilot Custom Instructions&lt;/h2>
&lt;p>In a Copilot instructions file (a Markdown file with an optional YAML-like header), you can specify an &lt;code>applyTo&lt;/code> metadata property to automatically apply the instructions to certain files. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.ts,**/*.tsx&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">`PascalCase`&lt;/span> for component names and always define Prop interfaces. Prefer React Hooks and functional components for new React files.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, the &lt;code>applyTo&lt;/code> line tells Copilot to attach these instructions to any TypeScript or TSX file in the workspace [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="examples-in-real-projects">Examples in Real Projects&lt;/h2>
&lt;h3 id="frontend-reacttypescript">Frontend (React/TypeScript)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.tsx,**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**React/TypeScript Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="font-weight:bold">**functional components**&lt;/span> and React Hooks (no class components).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always define component props via &lt;span style="font-weight:bold">**TypeScript interfaces**&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Import CSS modules or styled-components for styling (avoid global CSS).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`react-query`&lt;/span> or similar for data fetching instead of manual &lt;span style="color:#e6db74">`fetch`&lt;/span> calls.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="backend-netc">Backend (.NET/C#)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.cs&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**C# Backend Conventions:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`PascalCase`&lt;/span> for all public class, method, and property names.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Handle async I/O with &lt;span style="color:#e6db74">`async`&lt;/span>/&lt;span style="color:#e6db74">`await`&lt;/span>; do not use &lt;span style="color:#e6db74">`.Result`&lt;/span> or &lt;span style="color:#e6db74">`.Wait()`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always use the &lt;span style="color:#e6db74">`ILogger`&lt;/span> interface for logging (do not write to console directly).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Follow the company’s DI framework for service registration.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Validate all web request models with Data Annotations.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web-api-nodejstypescript">Web API (Node.js/TypeScript)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;routes/**/*.js,src/api/**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**API Project Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`express.Router()`&lt;/span> for defining endpoints (organize routes by feature).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always return appropriate HTTP status codes.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Validate request bodies with a schema (e.g. use &lt;span style="color:#e6db74">`Joi`&lt;/span> or &lt;span style="color:#e6db74">`ajv`&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Include descriptive comments for each endpoint function.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Log errors using a centralized middleware.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unit-test-projects">Unit Test Projects&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.test.js,**/*.spec.ts,**/tests/**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**Unit Test Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use descriptive test case names.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Structure tests with Arrange/Act/Assert comments or blocks.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always reset mocks/spies in an &lt;span style="color:#e6db74">`afterEach`&lt;/span> block.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> For C#: Place xUnit tests under a &lt;span style="color:#e6db74">`Tests/`&lt;/span> folder and use &lt;span style="color:#e6db74">`[Fact]`&lt;/span>/&lt;span style="color:#e6db74">`[Theory]`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Aim for at least 80% coverage on new features.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Glob patterns offer a powerful way to &lt;strong>scope&lt;/strong> Copilot’s custom instructions to the right parts of your codebase. By leveraging these filters and organizing instruction files carefully, teams can maintain clean, focused AI guidance that evolves with the project.&lt;/p>
&lt;p>&lt;strong>Sources:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>GitHub Docs: Adding Repository Custom Instructions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/docs/copilot/copilot-customization#_instructions-file-structure" target="_blank" rel="noopener"
>VS Code Copilot Customization&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>VS Code: Advanced Search&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>