<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github Copilot on Arthurs Blogs</title><link>https://blogs.homeport-hub.nl/tags/github-copilot/</link><description>Recent content in Github Copilot on Arthurs Blogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Jul 2025 17:00:00 +0200</lastBuildDate><atom:link href="https://blogs.homeport-hub.nl/tags/github-copilot/index.xml" rel="self" type="application/rss+xml"/><item><title>Glob Patterns in GitHub Copilot Custom Instructions</title><link>https://blogs.homeport-hub.nl/post/copilot-glob-patterns/copilot_glob_patterns/</link><pubDate>Mon, 14 Jul 2025 17:00:00 +0200</pubDate><guid>https://blogs.homeport-hub.nl/post/copilot-glob-patterns/copilot_glob_patterns/</guid><description>&lt;h1 id="deep-dive-glob-patterns-in-github-copilot-custom-instructions">Deep Dive: Glob Patterns in GitHub Copilot Custom Instructions&lt;/h1>
&lt;p>GitHub Copilot’s custom instructions let you provide project-specific guidance to the AI. By creating a repository file (typically &lt;code>.github/copilot-instructions.md&lt;/code> or &lt;code>*.instructions.md&lt;/code> in VS Code) you can tailor Copilot’s behavior to your team’s conventions and tools [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>]. Organizing these instructions with &lt;code>applyTo&lt;/code> filters improves maintainability: each instruction file can automatically apply only to matching files or folders, so you don’t have to duplicate or manually attach guidance. For example, setting &lt;code>applyTo: &amp;quot;**&amp;quot;&lt;/code> applies instructions to &lt;em>all&lt;/em> files, whereas more specific patterns target only relevant code [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>]. This keeps your instructions clean and focused on the files where they matter [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="understanding-glob-patterns">Understanding Glob Patterns&lt;/h2>
&lt;p>Glob patterns are a lightweight syntax for matching file paths. They use wildcards like &lt;code>*&lt;/code> and &lt;code>**&lt;/code> to match characters or directory levels.&lt;/p>
&lt;ul>
&lt;li>&lt;code>*&lt;/code> matches any sequence of characters &lt;em>within&lt;/em> a single path segment. For example, &lt;code>*.ts&lt;/code> matches all TypeScript files in the current directory [&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>vscode-advanced-search&lt;/a>].&lt;/li>
&lt;li>&lt;code>**&lt;/code> is a recursive wildcard that matches any number of directories (including zero). For example, &lt;code>**/*.md&lt;/code> matches all Markdown files in the current directory and &lt;strong>any&lt;/strong> subdirectory [&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>vscode-advanced-search&lt;/a>].&lt;/li>
&lt;li>&lt;code>?&lt;/code> matches exactly one character (e.g. &lt;code>file?.js&lt;/code> would match &lt;code>file1.js&lt;/code> or &lt;code>fileA.js&lt;/code> but not &lt;code>file10.js&lt;/code>). Character classes (e.g. &lt;code>[abc]&lt;/code>) match any one character in the brackets, and you can use ranges (&lt;code>[A-Z]&lt;/code>, &lt;code>[0-9]&lt;/code>) or negation (&lt;code>[!abc]&lt;/code>).&lt;/li>
&lt;/ul>
&lt;p>You can combine patterns (e.g., using &lt;code>{...}&lt;/code> or comma-separated lists) to match multiple extensions. For example, &lt;code>**/*.{js,ts,tsx}&lt;/code> can target several file types at once. Copilot’s &lt;code>applyTo&lt;/code> field supports comma-separated patterns, such as &lt;code>&amp;quot;**/*.ts,**/*.tsx&amp;quot;&lt;/code>, which matches both &lt;code>.ts&lt;/code> and &lt;code>.tsx&lt;/code> files [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="using-glob-patterns-in-copilot-custom-instructions">Using Glob Patterns in Copilot Custom Instructions&lt;/h2>
&lt;p>In a Copilot instructions file (a Markdown file with an optional YAML-like header), you can specify an &lt;code>applyTo&lt;/code> metadata property to automatically apply the instructions to certain files. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.ts,**/*.tsx&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">`PascalCase`&lt;/span> for component names and always define Prop interfaces. Prefer React Hooks and functional components for new React files.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, the &lt;code>applyTo&lt;/code> line tells Copilot to attach these instructions to any TypeScript or TSX file in the workspace [&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>github-docs&lt;/a>].&lt;/p>
&lt;h2 id="examples-in-real-projects">Examples in Real Projects&lt;/h2>
&lt;h3 id="frontend-reacttypescript">Frontend (React/TypeScript)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.tsx,**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**React/TypeScript Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="font-weight:bold">**functional components**&lt;/span> and React Hooks (no class components).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always define component props via &lt;span style="font-weight:bold">**TypeScript interfaces**&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Import CSS modules or styled-components for styling (avoid global CSS).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`react-query`&lt;/span> or similar for data fetching instead of manual &lt;span style="color:#e6db74">`fetch`&lt;/span> calls.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="backend-netc">Backend (.NET/C#)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.cs&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**C# Backend Conventions:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`PascalCase`&lt;/span> for all public class, method, and property names.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Handle async I/O with &lt;span style="color:#e6db74">`async`&lt;/span>/&lt;span style="color:#e6db74">`await`&lt;/span>; do not use &lt;span style="color:#e6db74">`.Result`&lt;/span> or &lt;span style="color:#e6db74">`.Wait()`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always use the &lt;span style="color:#e6db74">`ILogger`&lt;/span> interface for logging (do not write to console directly).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Follow the company’s DI framework for service registration.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Validate all web request models with Data Annotations.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web-api-nodejstypescript">Web API (Node.js/TypeScript)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;routes/**/*.js,src/api/**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**API Project Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`express.Router()`&lt;/span> for defining endpoints (organize routes by feature).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always return appropriate HTTP status codes.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Validate request bodies with a schema (e.g. use &lt;span style="color:#e6db74">`Joi`&lt;/span> or &lt;span style="color:#e6db74">`ajv`&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Include descriptive comments for each endpoint function.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Log errors using a centralized middleware.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unit-test-projects">Unit Test Projects&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.test.js,**/*.spec.ts,**/tests/**/*.ts&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">**Unit Test Guidelines:**&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use descriptive test case names.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Structure tests with Arrange/Act/Assert comments or blocks.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always reset mocks/spies in an &lt;span style="color:#e6db74">`afterEach`&lt;/span> block.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> For C#: Place xUnit tests under a &lt;span style="color:#e6db74">`Tests/`&lt;/span> folder and use &lt;span style="color:#e6db74">`[Fact]`&lt;/span>/&lt;span style="color:#e6db74">`[Theory]`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Aim for at least 80% coverage on new features.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Glob patterns offer a powerful way to &lt;strong>scope&lt;/strong> Copilot’s custom instructions to the right parts of your codebase. By leveraging these filters and organizing instruction files carefully, teams can maintain clean, focused AI guidance that evolves with the project.&lt;/p>
&lt;p>&lt;strong>Sources:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot?tool=vscode" target="_blank" rel="noopener"
>GitHub Docs: Adding Repository Custom Instructions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/docs/copilot/copilot-customization#_instructions-file-structure" target="_blank" rel="noopener"
>VS Code Copilot Customization&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options" target="_blank" rel="noopener"
>VS Code: Advanced Search&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Customizing GitHub Copilot with Custom Instructions and Prompt Files</title><link>https://blogs.homeport-hub.nl/post/github-copilot-custom-prompts/copilot_custom_prompts/</link><pubDate>Sun, 13 Jul 2025 22:10:00 +0200</pubDate><guid>https://blogs.homeport-hub.nl/post/github-copilot-custom-prompts/copilot_custom_prompts/</guid><description>&lt;h1 id="customizing-github-copilot-with-custom-instructions-and-prompt-files">Customizing GitHub Copilot with Custom Instructions and Prompt Files&lt;/h1>
&lt;p>GitHub Copilot Chat can be tailored to your project’s needs using &lt;strong>custom instructions&lt;/strong> and &lt;strong>prompt files&lt;/strong>. Custom instructions are project-wide guidelines or rules (written in Markdown) that Copilot automatically includes in every relevant chat, ensuring AI responses match your team’s style and standards. Prompt files (with a &lt;code>.prompt.md&lt;/code> suffix) are reusable chat templates you define in your workspace. They contain natural-language instructions and context references, and can accept parameters or include file contents to guide Copilot on a specific task. In this post, we’ll explain how to set up both features and walk through a demo: generating XUnit tests for a C# Fibonacci generator using a custom prompt.&lt;/p>
&lt;h2 id="custom-instructions-what-and-how">Custom Instructions: What and How&lt;/h2>
&lt;p>&lt;strong>Custom instructions&lt;/strong> are Markdown files (e.g. &lt;code>.github/copilot-instructions.md&lt;/code> or &lt;code>*.instructions.md&lt;/code>) that describe your coding practices, project requirements, or task-specific rules. For example, you might tell Copilot to “use XUnit for C# tests” or “format JSON with 2-space indentation”. When you open a Copilot Chat, VS Code automatically includes all instruction files whose patterns match the current context (e.g. file type or folder). This means you don’t have to repeat the same guidelines in every prompt – Copilot “remembers” them from your instruction files.&lt;/p>
&lt;p>To configure custom instructions:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>File format &amp;amp; location:&lt;/strong> Create a Markdown file with a &lt;code>.instructions.md&lt;/code> suffix. By default, workspace instructions go under &lt;code>.github/instructions/&lt;/code>, or you can use the legacy &lt;code>.github/copilot-instructions.md&lt;/code> at the repo root.&lt;/li>
&lt;li>&lt;strong>YAML front matter:&lt;/strong> Optionally include a YAML header with metadata like &lt;code>applyTo:&lt;/code>. The &lt;code>applyTo&lt;/code> property takes glob patterns to control when the instructions apply. For instance, &lt;code>applyTo: &amp;quot;**/*.cs&amp;quot;&lt;/code> makes the instructions automatically apply only to C# files.&lt;/li>
&lt;li>&lt;strong>Content:&lt;/strong> Below the header, write your guidelines in plain English using Markdown (lists, paragraphs, code blocks, etc.).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.cs&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always use the XUnit framework for C# unit tests.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Write test methods with &lt;span style="color:#e6db74">`[Fact]`&lt;/span> attributes.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`Assert.Equal`&lt;/span> for value assertions and include edge cases.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prompt-files-defining-reusable-chat-prompts">Prompt Files: Defining Reusable Chat Prompts&lt;/h2>
&lt;p>A &lt;strong>prompt file&lt;/strong> (&lt;code>.prompt.md&lt;/code>) is a Markdown template for a Copilot Chat query. It can include static instructions, example context, and even reference code files. Prompt files let you save common tasks (like “generate tests for a file”) so you can reuse them easily.&lt;/p>
&lt;h3 id="prompt-file-structure">Prompt File Structure&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mode: &amp;#39;agent&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description: &amp;#39;Generate XUnit tests for a given C# file.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tools: [&amp;#39;codebase&amp;#39;, &amp;#39;editFiles&amp;#39;, &amp;#39;runCommands&amp;#39;, &amp;#39;testFailure&amp;#39;, &amp;#39;search&amp;#39;, &amp;#39;usages&amp;#39;, &amp;#39;findTestFiles&amp;#39;]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write comprehensive XUnit unit tests for the C# file &lt;span style="color:#e6db74">`${input:filename}`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cover typical cases and edge cases. Use &lt;span style="color:#e6db74">`[Fact]`&lt;/span> attributes and &lt;span style="color:#e6db74">`Assert.Equal`&lt;/span> for value assertions.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use available tools to retrieve file content and verify its structure before test generation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="why-use-mode-agent-and-tools">Why Use Mode: &amp;lsquo;agent&amp;rsquo; and Tools?&lt;/h3>
&lt;p>Setting &lt;code>mode: 'agent'&lt;/code> enables Copilot to act autonomously using the provided tools. This allows it to:&lt;/p>
&lt;ul>
&lt;li>Search and open the correct file using &lt;code>search&lt;/code> and &lt;code>codebase&lt;/code>&lt;/li>
&lt;li>Inspect file content contextually before writing tests&lt;/li>
&lt;li>Create or update test files using &lt;code>editFiles&lt;/code>&lt;/li>
&lt;li>Use &lt;code>runCommands&lt;/code> or &lt;code>testFailure&lt;/code> to understand failing test cases (optional)&lt;/li>
&lt;li>Navigate test structure via &lt;code>findTestFiles&lt;/code> and &lt;code>usages&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This setup transforms the prompt from a static question into a smart agent-based workflow that can operate across your codebase.&lt;/p>
&lt;h3 id="how-to-use-prompt-files-in-vs-code">How to Use Prompt Files in VS Code&lt;/h3>
&lt;ol>
&lt;li>Enable prompt files: in &lt;code>settings.json&lt;/code>, add&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;chat.promptFiles&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Place your prompt files under &lt;code>.github/prompts/&lt;/code>.&lt;/li>
&lt;li>Run via Copilot Chat using:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/Generate Unit Tests: filename&lt;span style="color:#f92672">=&lt;/span>MyClass.cs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-up-instructions-and-prompts">Setting Up Instructions and Prompts&lt;/h2>
&lt;h3 id="instruction-file-example">Instruction File Example&lt;/h3>
&lt;p>&lt;code>.github/instructions/test-guidelines.instructions.md&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>applyTo: &amp;#34;**/*.cs&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Always use the XUnit framework for C# unit tests.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`[Fact]`&lt;/span> for test methods.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">-&lt;/span> Use &lt;span style="color:#e6db74">`Assert.Equal`&lt;/span> and test edge cases.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="prompt-file-example">Prompt File Example&lt;/h3>
&lt;p>&lt;code>.github/prompts/generate-tests.prompt.md&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mode: &amp;#39;agent&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>description: &amp;#39;Generate XUnit tests for a C# file.&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tools: [&amp;#39;codebase&amp;#39;, &amp;#39;editFiles&amp;#39;, &amp;#39;runCommands&amp;#39;, &amp;#39;testFailure&amp;#39;, &amp;#39;search&amp;#39;, &amp;#39;usages&amp;#39;, &amp;#39;findTestFiles&amp;#39;]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Write comprehensive XUnit unit tests for the C# file &lt;span style="color:#e6db74">`${input:filename}`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cover typical cases and edge cases. Use &lt;span style="color:#e6db74">`[Fact]`&lt;/span> and &lt;span style="color:#e6db74">`Assert.Equal`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use available tools to read file content and test structure.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="demo-xunit-tests-for-fibonacci-generator">Demo: XUnit Tests for Fibonacci Generator&lt;/h2>
&lt;h3 id="c-implementation">C# Implementation&lt;/h3>
&lt;p>Imagine you&amp;rsquo;re working on a .NET backend project where performance and correctness of core algorithmic components are critical. One such component is a utility class responsible for generating Fibonacci sequences, used across several services for simulation or computation purposes.&lt;/p>
&lt;p>You&amp;rsquo;ve written the initial implementation, but you want to ensure it&amp;rsquo;s well-tested before integrating it into the main pipeline. Rather than manually writing all unit tests, you use your configured Copilot agent prompt to automate the process—saving time while ensuring consistency and coverage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FibonacciGenerator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>[] Generate(&lt;span style="color:#66d9ef">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentException(&lt;span style="color:#e6db74">&amp;#34;n must be non-negative&amp;#34;&lt;/span>, nameof(n));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n == &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span> Array.Empty&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>[] result = &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>[n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n &amp;gt; &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result[&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">2&lt;/span>; i &amp;lt; n; i++) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result[i] = result[i-&lt;span style="color:#ae81ff">1&lt;/span>] + result[i-&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="running-the-custom-prompt">Running the Custom Prompt&lt;/h3>
&lt;p>You can now invoke the prompt with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>/Generate Unit Tests: filename&lt;span style="color:#f92672">=&lt;/span>FibonacciGenerator.cs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copilot will use &lt;code>search&lt;/code>, &lt;code>codebase&lt;/code>, and &lt;code>editFiles&lt;/code> to:&lt;/p>
&lt;ul>
&lt;li>Locate the source file by name&lt;/li>
&lt;li>Read its content and logic&lt;/li>
&lt;li>Determine expected inputs and edge cases&lt;/li>
&lt;li>Create or update a corresponding XUnit test file in the correct test folder&lt;/li>
&lt;/ul>
&lt;h3 id="generated-unit-tests">Generated Unit Tests&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FibonacciGeneratorTests&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [Fact]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Generate_ReturnsSequence_ForPositiveInput() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>[] result = FibonacciGenerator.Generate(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.Equal(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>[] { &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span> }, result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [Fact]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Generate_ReturnsEmpty_ForZero() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>[] result = FibonacciGenerator.Generate(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.Empty(result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [Fact]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Generate_ThrowsArgumentException_ForNegative() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.Throws&amp;lt;ArgumentException&amp;gt;(() =&amp;gt; FibonacciGenerator.Generate(-&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These tests match your coding standards (defined in instructions), and are context-aware thanks to the agent prompt.&lt;/p>
&lt;h2 id="how-prompts-and-instructions-work-together">How Prompts and Instructions Work Together&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Instructions&lt;/strong> define global behavior per file type (e.g., C# = use XUnit)&lt;/li>
&lt;li>&lt;strong>Prompts&lt;/strong> define the specific task (e.g., &amp;ldquo;write tests for this file&amp;rdquo;) and can invoke tools in agent mode&lt;/li>
&lt;li>VS Code combines both into the chat context automatically&lt;/li>
&lt;li>Variables like &lt;code>${input:filename}&lt;/code> and file references like &lt;code>#file:&lt;/code> give dynamic, contextual behavior&lt;/li>
&lt;/ul>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>By using custom instructions and prompts together, GitHub Copilot becomes a powerful tool tailored to your development workflow. Define coding standards once with instructions, and reuse smart, parameterized task flows via prompts. Agent-based prompts and tool access allow Copilot to generate, verify, and manage files intelligently. In our .NET example, this enabled automated, consistent, and idiomatic test generation for any class.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>References:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://code.visualstudio.com/docs/copilot/copilot-customization" target="_blank" rel="noopener"
>VS Code Copilot Customization&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.github.com/en/copilot/how-tos/custom-instructions/adding-repository-custom-instructions-for-github-copilot" target="_blank" rel="noopener"
>GitHub Docs: Adding Repository Custom Instructions&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>