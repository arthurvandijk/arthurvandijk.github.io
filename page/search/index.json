[{"content":"Customizing GitHub Copilot with Custom Instructions and Prompt Files GitHub Copilot Chat can be tailored to your project’s needs using custom instructions and prompt files. Custom instructions are project-wide guidelines or rules (written in Markdown) that Copilot automatically includes in every relevant chat, ensuring AI responses match your team’s style and standards. Prompt files (with a .prompt.md suffix) are reusable chat templates you define in your workspace. They contain natural-language instructions and context references, and can accept parameters or include file contents to guide Copilot on a specific task. In this post, we’ll explain how to set up both features and walk through a demo: generating XUnit tests for a C# Fibonacci generator using a custom prompt.\nCustom Instructions: What and How Custom instructions are Markdown files (e.g. .github/copilot-instructions.md or *.instructions.md) that describe your coding practices, project requirements, or task-specific rules. For example, you might tell Copilot to “use XUnit for C# tests” or “format JSON with 2-space indentation”. When you open a Copilot Chat, VS Code automatically includes all instruction files whose patterns match the current context (e.g. file type or folder). This means you don’t have to repeat the same guidelines in every prompt – Copilot “remembers” them from your instruction files.\nTo configure custom instructions:\nFile format \u0026amp; location: Create a Markdown file with a .instructions.md suffix. By default, workspace instructions go under .github/instructions/, or you can use the legacy .github/copilot-instructions.md at the repo root. YAML front matter: Optionally include a YAML header with metadata like applyTo:. The applyTo property takes glob patterns to control when the instructions apply. For instance, applyTo: \u0026quot;**/*.cs\u0026quot; makes the instructions automatically apply only to C# files. Content: Below the header, write your guidelines in plain English using Markdown (lists, paragraphs, code blocks, etc.). --- applyTo: \u0026#34;**/*.cs\u0026#34; --- - Always use the XUnit framework for C# unit tests. - Write test methods with `[Fact]` attributes. - Use `Assert.Equal` for value assertions and include edge cases. Prompt Files: Defining Reusable Chat Prompts A prompt file (.prompt.md) is a Markdown template for a Copilot Chat query. It can include static instructions, example context, and even reference code files. Prompt files let you save common tasks (like “generate tests for a file”) so you can reuse them easily.\nPrompt File Structure --- mode: \u0026#39;agent\u0026#39; description: \u0026#39;Generate XUnit tests for a given C# file.\u0026#39; tools: [\u0026#39;codebase\u0026#39;, \u0026#39;editFiles\u0026#39;, \u0026#39;runCommands\u0026#39;, \u0026#39;testFailure\u0026#39;, \u0026#39;search\u0026#39;, \u0026#39;usages\u0026#39;, \u0026#39;findTestFiles\u0026#39;] --- Write comprehensive XUnit unit tests for the C# file `${input:filename}`. Cover typical cases and edge cases. Use `[Fact]` attributes and `Assert.Equal` for value assertions. Use available tools to retrieve file content and verify its structure before test generation. Why Use Mode: \u0026lsquo;agent\u0026rsquo; and Tools? Setting mode: 'agent' enables Copilot to act autonomously using the provided tools. This allows it to:\nSearch and open the correct file using search and codebase Inspect file content contextually before writing tests Create or update test files using editFiles Use runCommands or testFailure to understand failing test cases (optional) Navigate test structure via findTestFiles and usages This setup transforms the prompt from a static question into a smart agent-based workflow that can operate across your codebase.\nHow to Use Prompt Files in VS Code Enable prompt files: in settings.json, add \u0026#34;chat.promptFiles\u0026#34;: true Place your prompt files under .github/prompts/. Run via Copilot Chat using: /Generate Unit Tests: filename=MyClass.cs Setting Up Instructions and Prompts Instruction File Example .github/instructions/test-guidelines.instructions.md\n--- applyTo: \u0026#34;**/*.cs\u0026#34; --- - Always use the XUnit framework for C# unit tests. - Use `[Fact]` for test methods. - Use `Assert.Equal` and test edge cases. Prompt File Example .github/prompts/generate-tests.prompt.md\n--- mode: \u0026#39;agent\u0026#39; description: \u0026#39;Generate XUnit tests for a C# file.\u0026#39; tools: [\u0026#39;codebase\u0026#39;, \u0026#39;editFiles\u0026#39;, \u0026#39;runCommands\u0026#39;, \u0026#39;testFailure\u0026#39;, \u0026#39;search\u0026#39;, \u0026#39;usages\u0026#39;, \u0026#39;findTestFiles\u0026#39;] --- Write comprehensive XUnit unit tests for the C# file `${input:filename}`. Cover typical cases and edge cases. Use `[Fact]` and `Assert.Equal`. Use available tools to read file content and test structure. Demo: XUnit Tests for Fibonacci Generator C# Implementation Imagine you\u0026rsquo;re working on a .NET backend project where performance and correctness of core algorithmic components are critical. One such component is a utility class responsible for generating Fibonacci sequences, used across several services for simulation or computation purposes.\nYou\u0026rsquo;ve written the initial implementation, but you want to ensure it\u0026rsquo;s well-tested before integrating it into the main pipeline. Rather than manually writing all unit tests, you use your configured Copilot agent prompt to automate the process—saving time while ensuring consistency and coverage.\npublic static class FibonacciGenerator { public static int[] Generate(int n) { if (n \u0026lt; 0) throw new ArgumentException(\u0026#34;n must be non-negative\u0026#34;, nameof(n)); if (n == 0) return Array.Empty\u0026lt;int\u0026gt;(); int[] result = new int[n]; result[0] = 0; if (n \u0026gt; 1) { result[1] = 1; for (int i = 2; i \u0026lt; n; i++) { result[i] = result[i-1] + result[i-2]; } } return result; } } Running the Custom Prompt You can now invoke the prompt with:\n/Generate Unit Tests: filename=FibonacciGenerator.cs Copilot will use search, codebase, and editFiles to:\nLocate the source file by name Read its content and logic Determine expected inputs and edge cases Create or update a corresponding XUnit test file in the correct test folder Generated Unit Tests public class FibonacciGeneratorTests { [Fact] public void Generate_ReturnsSequence_ForPositiveInput() { int[] result = FibonacciGenerator.Generate(5); Assert.Equal(new int[] { 0, 1, 1, 2, 3 }, result); } [Fact] public void Generate_ReturnsEmpty_ForZero() { int[] result = FibonacciGenerator.Generate(0); Assert.Empty(result); } [Fact] public void Generate_ThrowsArgumentException_ForNegative() { Assert.Throws\u0026lt;ArgumentException\u0026gt;(() =\u0026gt; FibonacciGenerator.Generate(-1)); } } These tests match your coding standards (defined in instructions), and are context-aware thanks to the agent prompt.\nHow Prompts and Instructions Work Together Instructions define global behavior per file type (e.g., C# = use XUnit) Prompts define the specific task (e.g., \u0026ldquo;write tests for this file\u0026rdquo;) and can invoke tools in agent mode VS Code combines both into the chat context automatically Variables like ${input:filename} and file references like #file: give dynamic, contextual behavior Conclusion By using custom instructions and prompts together, GitHub Copilot becomes a powerful tool tailored to your development workflow. Define coding standards once with instructions, and reuse smart, parameterized task flows via prompts. Agent-based prompts and tool access allow Copilot to generate, verify, and manage files intelligently. In our .NET example, this enabled automated, consistent, and idiomatic test generation for any class.\nReferences:\nVS Code Copilot Customization GitHub Docs: Adding Repository Custom Instructions ","date":"2025-07-13T22:10:00+02:00","permalink":"http://localhost:1313/post/github-copilot-custom-prompts/copilot_custom_prompts/","title":"Customizing GitHub Copilot with Custom Instructions and Prompt Files"},{"content":"Authorization directive in Angular with Msal-Angular In this blog, I would like to share with you a way to dynamically add or remove elements based on the user\u0026rsquo;s authentication status using an authorized directive.\nWhen I was working on a Blazor project, I used an AuthorizedView component, as described in the Microsoft documentation on Blazor security. This component made displaying authorized data incredibly easy. However, when I switched back to Angular, I found myself missing this component a lot. So, I decided to create my own directive based on the NgIf directive for displaying authorized data.\nFor the purpose of this blog, we will be using the following context:\nAngular 14 web app MSAL Library for authentication (@azure/msal-browser \u0026amp; @azure/msal-angular) The idea is to create a directive that injects the MSAL services, and based on the user\u0026rsquo;s authentication status, dynamically creates or clears the embedded view.\nBlazor AuthorizationView What is an AuthorizeView component?\nAn AuthorizeView component selectively displays UI content depending on whether the user is authorized. This approach is useful when you only need to display data for the user and don\u0026rsquo;t need to use the user\u0026rsquo;s identity in procedural logic.\nThis is the default example from the microsoft website for using the AuthorizedView component. The content of \u0026lt;Authorized\u0026gt; and \u0026lt;NotAuthorized\u0026gt; tags can include arbitrary items, such as other interactive components.\nIf authorization conditions aren\u0026rsquo;t specified, AuthorizeView uses a default policy:\nAuthenticated (signed-in) users are authorized. Unauthenticated (signed-out) users are unauthorized. What is an AuthorizeView component? An AuthorizeView component selectively displays UI content depending on whether the user is authorized. This approach is useful when you only need to display data for the user and don’t need to use the user’s identity in procedural logic.\nThis is the default example from the Microsoft website for using the AuthorizeView component. The content of and tags can include arbitrary items, such as other interactive components.\nIf authorization conditions aren’t specified, AuthorizeView uses a default policy:\nAuthenticated (signed-in) users are authorized. Unauthenticated (signed-out) users are unauthorized.\nStructural directive For creating the authorized directive we use an structural directive.\nStructural directives are directives which change the DOM layout by adding and removing DOM elements.\nAngular provides a set of built-in structural directives, such as NgIf, NgForOf, NgSwitch, and others, which are commonly used in all Angular projects.\nThis is exactly what we need for adding or removing DOM elements based on the user\u0026rsquo;s authentication status. So, let\u0026rsquo;s create a structural directive that injects the MSAL services and dynamically adds or removes the element based on the user\u0026rsquo;s authentication status.\n*authorized directive So lets create the authorized structural directive. First we start with injecting the services in the constructor.\nconstructor( private templateRef: TemplateRef\u0026lt;any\u0026gt;, private viewContainer: ViewContainerRef, private authService: MsalService, private broadcastService: MsalBroadcastService ) { } templateRef \u0026amp; ViewContainer TemplateRef helps you get to the contents and ViewContainerRef accesses the view container\nauthService $ broadcastServices These services are provided by the Msal library and can be used to determine if a user is authorized (authService) and listen to authorization-related events (broadcastService).\nIn the ngOnInit function, we subscribe to the InteractionStatus \u0026ldquo;None\u0026rdquo; event. This event is fired when an interaction is complete. We subscribe to this event so that when this event is fired, we can determine if the element should be added or removed from the DOM.\npublic ngOnInit(): void { this.broadcastSubscription = this.broadcastService.inProgress$.pipe( filter((eventType: InteractionStatus) =\u0026gt; eventType === InteractionStatus.None), takeUntil(this._destroying$) ).subscribe(() =\u0026gt; { this.setDisplay(); }); } As you can see, we use the rxjs takeUntil operator for cleaning up the subscription. The takeUntil operator emits the values emitted by the source Observable until a notifier Observable emits a value.\nTo make this work, we need to declare two private properties.\nprivate readonly _destroying$ = new Subject\u0026lt;void\u0026gt;(); private broadcastSubscription!: Subscription; _destroying$: observable for notifying the takeUntil broadcastSubscription: Subscription we need to clean up when the element is destroyed Now it\u0026rsquo;s time to add the function which contains the logic for adding or removing the element based on the authentication status. private setDisplay(): void { const account = this.authService.instance.getActiveAccount(); if (account \u0026amp;\u0026amp; !this.hasView) { this.viewContainer.createEmbeddedView(this.templateRef); this.hasView = true; } else if (!account \u0026amp;\u0026amp; this.hasView) { this.viewContainer.clear(); this.hasView = false; } } First, we get the active account from the authService. If an active account is returned, we know that the user is authenticated. Also, we check if the element is already added. If not, then we can create the element in the container and update the hasView value. When the user isn\u0026rsquo;t authenticated and the template was created in the container, we need to clear the container.\nTo clean up the mess we made, we use the ngOnDestroy to clean up the subscriptions when the component is destroyed.\npublic ngOnDestroy(): void { this._destroying$.next(undefined); this._destroying$.complete(); this.broadcastSubscription.unsubscribe(); } Now we have a structural directive that we can place on elements which should be added or removed based on the user\u0026rsquo;s authentication status. If we put it all together, we get the following directive:\n","date":"2023-04-20T22:10:00+02:00","permalink":"http://localhost:1313/post/authorization-directive/authorization-directive/","title":"Angular structural Directive for authorized content"}]